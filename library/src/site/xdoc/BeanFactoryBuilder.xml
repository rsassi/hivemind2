<?xml version="1.0" encoding="utf-8"?><!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<document>
   <properties>
      <title>hivemind.lib.BeanFactoryBuilder Service</title>
   </properties>
   <body>
    
      <p>The <a href="hivedocs/service/hivemind.lib.BeanFactoryBuilder.html"> 
      BeanFactoryBuilder</a> services is used to construct a 
      <a href="apidocs/org/apache/hivemind/lib/BeanFactory.html">BeanFactory</a> instance. An BeanFactory will <em>vend out</em> 
      instances of classes. A logical name is mapped to a particular Java class 
      to be instantiated. </p>
    
      <p> Client code can retrieve beans via the factory's <code>get()</code> 
      method. Beans are retrieved using a <em>locator</em>, which consists of a 
      name and an optional initializer seperated by commas. The initializer is 
      provided to the bean via an alternate constructor that takes a single 
      string parameter. Initializers are used, typically, to initialize 
      properties of the bean, but the actual implementation is internal to the 
      bean class. </p>
    
      <section name="Usage">
      
      
         <p> The service takes a single parameter element:</p>
      
         <source xml:space="preserve">
&lt;factory vend-class="..." configuration-id="..." default-cacheable="..."/&gt;
</source>
      <p> The <code>vend-class</code> attribute is the name of a class all 
        vended objects must be assignable to (as a class or interface). This is 
        used to validate contributed bean definitions. By default it is 
        <code>java.lang.Object</code>.</p>
      <p>The <code>configuration-id</code> is the id of the companion 
        configuration (used to define object classes).</p>
      <p>The optional <code>default-cacheable</code> attribute sets the default 
        for whether instantiated beans should be cached for reuse. By default 
        this is true, which is appropriate for most use cases where the vended 
        objects are immutable.</p>
    </section>
    
      <section name="Configuration">
      
      
         <p>Each BeanFactory service must have a configuration, into which beans 
        are contributed:</p>
      
         <source xml:space="preserve">
&lt;configuration-point id="..." schema-id="hivemind.lib.BeanFactoryContribution"/&gt;
         </source>
      <p>Contributions into the configuration are used to specify the bean 
        classes to instantiate, as:</p>
      <source xml:space="preserve">
&lt;bean name="..." class="..." cacheable="..."/&gt;  </source>
      <p> <code>name</code> is a unique name used to reference an instance of 
        the class. </p>
      <p><code>class</code> is the Java class to instantiate.</p>
      <p><code>cacheable</code> determines whether instances of the class are 
        cacheable (that is, have immutable internal state and should be 
        reused), or non-cacheable (presumably, because of mutable internal 
        state).</p>
    </section>
  
   </body>
</document>