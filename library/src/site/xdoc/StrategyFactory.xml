<?xml version="1.0" encoding="utf-8"?><!-- 
   Copyright 2004, 2005 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<document>
   <properties>
      <title>hivemind.lib.StrategyFactory Service</title>
   </properties>
   <body>
    
      <p>The <a href="hivedocs/service/hivemind.lib.StrategyFactory.html"> 
      StrategyFactory</a> service is used to create a service implementation
      based on a service interface and a number of <em>strategies</em> implementing that interface.</p>
      
      <p>
        The class of the first parameter of each method is used to select the correct strategy instance to
        delegate the method invocation to.  
      </p>
      
      <p>
        The class-to-strategy lookup understands inheritance. If an exact match for a class is not found,
        then the search works up the inheritance chain.  First, it checks all the super-classes, working upwards,
        but skipping java.lang.Object. It then searches all the interfaces directly or indirectly implemented by
        the search class.  Finally, java.lang.Object is checked.  It is an exception if no match is found (so you should
        almost always include a strategy for java.lang.Object).
      </p>
      
      
    
      <section name="Usage">
      
      
         <p> The factory expects a single parameter element: </p>
      
         <source xml:space="preserve">
&lt;construct configuration-id="..."/&gt;</source>
      <p>The <code>configuration-id</code> is the id of the companion 
        configuration (used to define classes and strategies).</p>
    </section>
    
      <section name="Configuration">
      
      
         <p>Each srevice constructed by StrategyFactory must have a configuration, into which strategies 
        are contributed:</p>
      
         <source xml:space="preserve">
&lt;configuration-point id="..." schema-id="hivemind.lib.StrategyRegistry"/&gt;</source>
    </section>
    
      <section name="Contributions">
      
      
         <p>Contributions into the configuration are used to specify classes to match, and the corresponding strategy to use.</p>
      
         <subsection name="strategy">
        
        
            <source xml:space="preserve">
&lt;strategy class="..." object="..."/&gt; </source>
        <p>Contributes a strategy. The <code>class</code> attribute defines the class to match against, the 
          <code>object</code> attribute provides the actual strategy object (which must implement the service 
          interface). </p>
      </subsection>
    
      </section>
  
   </body>
</document>